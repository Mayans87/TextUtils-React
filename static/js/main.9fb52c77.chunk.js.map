{"version":3,"sources":["components/Alert.js","components/NavBar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","word","alert","react_default","a","createElement","class","concat","type","role","charAt","toUpperCase","slice","msg","NavBar","className","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","placeholder","onClick","togglemode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","Text","setText","Fragment","heading","style","backgroundColor","color","value","onChange","event","console","log","target","rows","newText","showalert","toLowerCase","SpeechSynthesisUtterance","text","window","speechSynthesis","speak","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","defaultProps","About","App","setmode","_useState3","_useState4","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9fb52c77.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n     \r\n       return  word.charAt(0).toUpperCase()+word.slice(1);\r\n\r\n    }\r\n  return (\r\n props.alert /* only proceeds if both are true */&& <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n    \r\n  </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from \"react-router-dom\";\r\n\r\nexport default function NavBar(props) {\r\n \r\n  \r\n return (\r\n \r\n<nav className={`navbar navbar-${props.mode} navbar-expand-lg bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href =\"#\">{props.title}</a>\r\n    {/* <Link className=\"navbar-brand\" to =\"/\">{props.title}</Link> */}\r\n    <button className=\"navbar-toggler text-light\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\" >\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\"  >Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\"  >Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item text-white\" >\r\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.About}</Link> */}\r\n          {/* <a className=\"nav-link\" href=\"#\">{props.About}</a>\r\n        </li> */} \r\n      </ul>\r\n      <form className=\"d-flex\" role=\"search\" />\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-info\" type=\"submit\">Search</button>\r\n        <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input mx-1\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode} />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable DarkMode</label>\r\n</div>\r\n  </div>\r\n  </div>\r\n  \r\n  </nav>\r\n    )\r\n}\r\nNavBar.propTypes = {\r\n    title: PropTypes.string.isRequired, \r\n    About: PropTypes.string.isRequired,\r\n       //specifies datatype of value used and isrequired makes it a must, i.e.,cant be blank.\r\n}  \r\nNavBar.defaultProps ={\r\n  title: 'set title here',    //default text in case of no value passed.\r\n  About: 'here about',\r\n\r\n}","import React, {useState} from  'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Textform(props) {\r\n  const [Text, setText] = useState('Enter text'); //'enter text'=value of text and settext is values after updation.\r\n  const ConvertToUp =()=>{\r\n    console.log(\"clicked\");\r\n   let newText= Text.toUpperCase();\r\n   setText(newText);\r\n   props.showalert(\"Converted!\",\"success\")\r\n    \r\n  }\r\nconst change =(event)=>{\r\n  console.log(\"onchange\");\r\n  setText(event.target.value);\r\n}\r\nlet click1=()=>{\r\n  setText('');\r\n}\r\nconst ConvertTolo=()=>{\r\n  setText(Text.toLowerCase());\r\n  props.showalert(\"Converted!\",\"success\")\r\n}\r\nfunction Clear(){\r\nsetText('');\r\nprops.showalert(\"Cleared!\",\"success\")\r\n}\r\nconst speak=()=>{\r\n  var msg = new SpeechSynthesisUtterance();\r\nmsg.text = Text;\r\nwindow.speechSynthesis.speak(msg);\r\n}\r\nconst copy=()=>{\r\n let copyText= document.getElementById(\"myBox\")\r\n  copyText.select();\r\n  copyText.setSelectionRange(0,99999);\r\n  navigator.clipboard.writeText(copyText.value);\r\n  alert(\"Copied the text: \" + copyText.value);\r\n}\r\n  return (<>\r\n    \r\n    <div className='textform'>\r\n        <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n<textarea className=\"form-control\" style={props.mode==='dark'? {backgroundColor:'grey', color:'white',}:{backgroundColor:'white', color:'black'}} value={Text} onClick={click1} onChange={change} id=\"myBox\" rows=\"8\"></textarea>\r\n</div> \r\n<button type=\"button\" className=\"btn btn-primary mx-2\" onClick={ConvertToUp}>Click to convert</button>\r\n<button type=\"button\" className=\"btn btn-primary mx-2\" onClick={ConvertTolo}>Click to convert</button>\r\n<button type=\"button\" className=\"btn btn-primary mx-2\" onClick={Clear}>Clear</button>\r\n<button type=\"button\" className=\"btn btn-primary mx-2\" onClick={speak}>Speak</button>\r\n<button type=\"button\" className=\"btn btn-primary mx-2\" onClick={copy}>Copy</button>\r\n<div className=\"container\">\r\n  <p className='mb-8'>{Text.split(' ').length} words and {Text.length} characters have been used and it takes {(1/125)*Text.split(' ').length}minute/s to read this.</p>\r\n  <h2>Preview</h2>\r\n  <p>{Text}</p>\r\n</div>\r\n\r\n                 \r\n    </div>\r\n    </>\r\n  )\r\n}\r\nTextform.propTypes = {\r\n    heading: PropTypes.string.isRequired,\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\n// import About  from './components/About';\nimport Alert from './components/Alert';\nimport NavBar from './components/NavBar';\nimport Textform from './components/Textform';\n// import { \n// BrowserRouter as\n//  Router , Route, Routes ,\n// } from \"react-router-dom\"\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const togglemode=()=>{\n    console.log(\"clicked!\");\n    if(mode==='light'){\n      setmode('dark')\n      document.body.style.backgroundColor='grey';\n      document.body.style.color='grey';\n      showalert(\"darkmode has been enabled\",\"success\")\n    }else{\n      setmode('light')\n      document.body.style.backgroundColor='white';\n      document.body.style.color='black';\n      showalert(\"darkmode has been disabled\",\"warning\")\n    }}\n    const [alert, setalert] = useState(null);\n    const showalert=(message,type)=>{ setalert({\n     msg : message,\n     type : type,})\n     setTimeout(() => {\n      setalert(null);\n      }, 1500);\n    }\n  \n  return (<>\n  \n  {/* <Router> */}\n  < NavBar title= 'TextUtils' About='About' mode={mode} togglemode={togglemode} />\n  <Alert alert={alert}/>\n  \n  \n  <div className=\"container my-3\">\n  <Textform heading ='Your Text Goes Here:' mode={mode} showalert={showalert}/>\n  \n  \n  {/* <Routes>\n          <Route  exact path='/about' element={ <About mode={mode}/>} />\n          \n          \n          <Route exact path=\"/\" element={<Textform heading ='Your Text Goes Here:' mode={mode} showalert={showalert}/>} />\n          \n         \n          \n         \n  </Routes> */}\n  </div>\n  \n  \n  {/* </Router> */}\n  \n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n   \n  <React.StrictMode>\n    <App />\n  </React.StrictMode> \n   \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}